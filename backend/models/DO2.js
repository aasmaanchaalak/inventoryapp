const mongoose = require('mongoose');

const do2ItemSchema = new mongoose.Schema({
  itemId: {
    type: String,
    required: true
  },
  type: {
    type: String,
    required: true,
    enum: ['square', 'rectangular', 'round', 'oval']
  },
  size: {
    type: String,
    required: true,
    trim: true,
    maxlength: [50, 'Size cannot be more than 50 characters']
  },
  thickness: {
    type: Number,
    required: true,
    min: [0.1, 'Thickness must be at least 0.1mm'],
    max: [50, 'Thickness cannot exceed 50mm']
  },
  originalQuantity: {
    type: Number,
    required: true,
    min: [0.1, 'Original quantity must be at least 0.1 tons']
  },
  dispatchedQuantity: {
    type: Number,
    required: true,
    min: [0, 'Dispatched quantity cannot be negative']
  },
  remainingQuantity: {
    type: Number,
    required: true,
    min: [0, 'Remaining quantity cannot be negative']
  },
  rate: {
    type: Number,
    required: true,
    min: [1, 'Rate must be at least ₹1'],
    max: [1000000, 'Rate cannot exceed ₹10,00,000']
  },
  hsnCode: {
    type: String,
    required: true,
    default: '7306'
  }
});

const do2Schema = new mongoose.Schema({
  poId: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'PurchaseOrder',
    required: [true, 'PO reference is required']
  },
  do1Id: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'DO1',
    required: [true, 'DO1 reference is required']
  },
  do2Number: {
    type: String,
    unique: true,
    required: true
  },
  status: {
    type: String,
    enum: ['draft', 'pending_approval', 'approved', 'rejected', 'executed', 'cancelled'],
    default: 'draft'
  },
  approvalStatus: {
    isApproved: {
      type: Boolean,
      default: false
    },
    approvedBy: {
      type: String,
      default: null
    },
    approvedAt: {
      type: Date,
      default: null
    },
    approvedQuantity: {
      type: Number,
      default: 0
    },
    remarks: {
      type: String,
      default: ''
    }
  },
  executionDetails: {
    executedBy: {
      type: String,
      default: null
    },
    executedAt: {
      type: Date,
      default: null
    },
    remarks: {
      type: String,
      default: ''
    },
    inventoryUpdates: {
      type: [Object],
      default: []
    }
  },
  items: {
    type: [do2ItemSchema],
    required: [true, 'At least one item is required'],
    validate: {
      validator: function(items) {
        return items && items.length > 0;
      },
      message: 'At least one item is required'
    }
  },
  remarks: {
    type: String,
    trim: true,
    maxlength: [1000, 'Remarks cannot be more than 1000 characters']
  },
  autoGenerated: {
    type: Boolean,
    default: true
  },
  targetDispatchDate: {
    type: Date,
    required: false,
    default: function() {
      // Auto-set to 7 days from creation if not provided
      const date = new Date();
      date.setDate(date.getDate() + 7);
      return date;
    },
    validate: {
      validator: function(value) {
        if (!value) return true; // Allow null/undefined
        return value >= new Date(); // Must be today or future
      },
      message: 'Target dispatch date must be today or in the future'
    }
  },
  companyInfo: {
    name: {
      type: String,
      default: 'Steel Tube Industries Ltd.'
    },
    address: {
      type: String,
      default: '123 Industrial Area, Manufacturing District, City - 123456'
    },
    phone: {
      type: String,
      default: '+91-9876543210'
    },
    email: {
      type: String,
      default: 'info@steeltubeindustries.com'
    },
    gstin: {
      type: String,
      default: '22AAAAA0000A1Z5'
    },
    pan: {
      type: String,
      default: 'AAAAA0000A'
    }
  }
}, {
  timestamps: true
});

// Generate DO2 number before saving
do2Schema.pre('save', async function(next) {
  if (this.isNew) {
    const count = await this.constructor.countDocuments();
    const year = new Date().getFullYear();
    this.do2Number = `DO2-${year}-${String(count + 1).padStart(4, '0')}`;
  }
  next();
});

// Virtual for formatted creation date
do2Schema.virtual('formattedCreatedAt').get(function() {
  if (!this.createdAt) return 'Not available';
  return this.createdAt.toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  });
});

// Virtual for total remaining quantity
do2Schema.virtual('totalRemainingQuantity').get(function() {
  return this.items.reduce((sum, item) => sum + item.remainingQuantity, 0);
});

// Ensure virtual fields are serialized
do2Schema.set('toJSON', { virtuals: true });
do2Schema.set('toObject', { virtuals: true });

// Create indexes for better performance
do2Schema.index({ poId: 1, createdAt: -1 });
do2Schema.index({ do1Id: 1 });
do2Schema.index({ do2Number: 1 });
do2Schema.index({ status: 1 });
do2Schema.index({ 'approvalStatus.isApproved': 1 });

module.exports = mongoose.model('DO2', do2Schema); 